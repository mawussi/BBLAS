#!/usr/bin/perl

use strict;
use List::MoreUtils qw{ any };
use warnings;

my $output1 = "../core_blas-eztrace/coreblas_z.c";
my $output2 = "../core_blas-eztrace/qwrapper_z.c";

my $coreblas_classic = "";
my $coreblas_quark   = "";

my @complexlist;
my @avoidlist;

@complexlist = qw( zhemm.c  zherk.c  zher2k.c
                   zlanhe.c zplghe.c zhessq.c );

@avoidlist = qw( zlag2c.c zgetf2.c zlarfb2.c
                 ztrbmm.c ztrgmm.c
                 zgetro.c ztitro.c );

sub ParseCore {

    my ($file) = @_ ;
    my $iscomplex = 0;

    open(M, $file);

    if ( any { $file =~ /.*$_/} @complexlist ) {
        $iscomplex = 1;
        $coreblas_quark   .= "#ifdef COMPLEX\n";
        $coreblas_classic .= "#ifdef COMPLEX\n";
    }
    while(!eof(M))
    {
        my $line = <M>;
        chomp $line;

        if ( $line =~ /^[a-zA-Z0-9_]*[ \*]CORE_.*\(/ &&
             ! ( $line =~ /static/ ) ) {
            # Function name
            my $funcname = $line;
            $funcname =~ s/.*(CORE_.*)\(.*/$1/;

            # short name
            my $shname = $funcname;
            $shname =~ s/CORE_z//; # Suppress z
            $shname =~ s/CORE_dz//;# Case of dzasum or dznrm2
            $shname =~ s/_quark//;
            $shname = uc($shname);

            # type returned
            my $type = $line;
            $type =~ s/^(.+)CORE_.*/$1/;

            #print $funcname."\n";
            #print $shname."\n";
            #print $type."\n";

            # list of arguments
            my $arglist = $line;
            $arglist =~ s/.*CORE_.*\(/(/;

            while ( ! ($line =~ /{/ ) ) {
                $line = <M>;
                chomp $line;
                $arglist .= $line;
            }

            $arglist =~ s/{//;
            $arglist =~ s/[ \t]+/ /g;                           #Remove spaces and tab
            #print $arglist."\n";

            #Short list of argument
            my $sharglist = $arglist;
            $sharglist =~ s/ *\)/)/g; #Remove space between last name and ) to avoid problem in following regexp
            $sharglist =~ s/[^,(]*\s\**([a-zA-Z0-9_]*[,)])/$1 /g; #Remove type
            #print $sharglist."\n";

            if ( $type =~ /void/ ) {
                if ( $funcname =~ /.*_quark/ ) {
                    $coreblas_quark .= "FUNCTION_QUARK( $funcname, $shname )\n";
                } else {
                    $coreblas_classic .= "FUNCTION_VOID( $funcname, $shname, $type,\n          $arglist,\n          $sharglist)\n";
                }
            } else {
                $coreblas_classic .= "FUNCTION_TYPE( $funcname, $shname, $type,\n          $arglist,\n          $sharglist)\n";
            }
        }
    }

    if ($iscomplex == 1) {
        $coreblas_classic .= "#endif\n";
        $coreblas_quark   .= "#endif\n";
    }
    close(M);
}

sub GenOneFile {
    my ($prefix, $directory, $output) = @_;

    my $lprefix = $directory ."/" . $prefix;

    # Convert all normal precision files, not mixed
    my @files  = `ls -1 ${lprefix}_z*.c ${lprefix}_dzasum.c`;

    #my $codegen = "../tools/codegen.py";

    $coreblas_classic = "";
    $coreblas_quark   = "";

    foreach my $file (@files)
    {
        chomp $file;
        if ( any { $file =~ /.*$_/} @avoidlist ) {
            next;
        }
        ParseCore( $file );
    }

    open(OUT, ">$output");
    my $filename = `basename $output`; chop $filename;
    print OUT <<ENDTEXT;
/**
 *
 * \@file ${filename}
 *
 *  PLASMA core_blas tracing kernel
 *  PLASMA is a software package provided by Univ. of Tennessee,
 *  Univ. of California Berkeley and Univ. of Colorado Denver
 *
 *  This file provides the wrapper for each function of the
 *  core_blas library which will generate an event before and
 *  after the execution of the kernel.
 *  This file is automatically generated with convert2eztrace.pl
 *  script. DO NOT MANUALLY EDIT THIS FILE.
 *
 * \@version 2.6.0
 * \@author Mathieu Faverge
 * \@date 2010-11-15
 * \@precisions normal z -> c d s
 *
 **/
#include <eztrace.h>
#include <ev_codes.h>
#include "common.h"
#include "coreblas_ev_codes.h"
#include "coreblas_macros.h"
#undef REAL
#define COMPLEX
ENDTEXT
;

    print $prefix;
    if ( $prefix eq 'core' ) {
        print OUT $coreblas_classic;
        if ( $coreblas_quark ne "" ) {
            print "ERROR during core parsing";
            print "\n" . $coreblas_quark . "\n";
        }
    }
    else {
        print OUT $coreblas_quark;
        if ( $coreblas_classic ne "" ) {
            print "ERROR during qwrapper parsing";
            print "\n" . $coreblas_classic . "\n";
        }
    }

    print OUT "\n";
    close(OUT);

    system("sed -i 's/_P[1-9]F[1-9]//g' $output" ); # Remove _Px
    system("sed -i 's/_P[1-9]//g' $output" );       # Remove _Px
    system("sed -i 's/_A[1-9]//g' $output" );       # Remove _Ax
    system("sed -i 's/_F[1-9]//g' $output" );       # Remove _Fx

    # PLRNT
    system("sed -i 's/PLTMG[_A-Z0-9]*/PLRNT/g' $output" );  #

    # LASET
    system("sed -i 's/LASET2/LASET/g' $output" );  #

    # LACPY_PIVOT
    system("sed -i 's/LACPY_PIVOT/LACPY/g' $output" );  #

    # LU
    system("sed -i 's/GETRF_[A-Z]*/GETRF/g'  $output" ); # GETRF_[INCPIV|RECLAP|RECTIL] and GETRF are using the same code
    system("sed -i 's/LASWP_ONTILE/LASWP/g'  $output" ); # LASWP_ONTILE and LASWP are using the same code
    system("sed -i 's/LASWPC_ONTILE/LASWP/g' $output" ); # LASWP_ONTILE and LASWP are using the same code
    system("sed -i 's/SWPTR_ONTILE/TRSM/g'   $output" ); #

    # 2 - sided
    system("sed -i 's/_HETRA1//g' $output" );  #
    system("sed -i 's/_CORNER//g' $output" );  #
    system("sed -i 's/LARFB_GEMM/LARFB/g'  $output" );  #
    system("sed -i 's/TRDALG[12]/TRDALG/g' $output" );  #
    system("sed -i 's/BRDALG[12]/BRDALG/g' $output" );  #

    # Groups all norm tasks together
    system("sed -i 's/GESSQ/LASSQ/g' $output" );  #
    system("sed -i 's/HESSQ/LASSQ/g' $output" );  #
    system("sed -i 's/SYSSQ/LASSQ/g' $output" );  #
    system("sed -i 's/PLSSQ/LASSQ/g' $output" );  #
    system("sed -i 's/TRSSQ/LASSQ/g' $output" );  #

    system("sed -i 's/TRASM/ASUM/g' $output" );  #
    system("sed -i 's/LANTR/LANGE/g' $output" );  #

    # RankRevealing QR
    system("sed -i 's/GEMM_TILE/GEMM/g' $output" );  #
    system("sed -i 's/GEMV_TILE/GEMV/g' $output" );  #
    system("sed -i 's/GEQP3_LARFG/LARFG/g' $output" );  #
    system("sed -i 's/GEQP3_TNTPIV/GEQRT/g' $output" );  #

    #system("python $codegen -f $output" );
}

#################################################################################
#
#                   Main
#
#################################################################################

GenOneFile( "core",     "core_blas",          "core_blas-eztrace/coreblas_z.c" );
GenOneFile( "qwrapper", "core_blas-qwrapper", "core_blas-eztrace/qwrapper_z.c" );
