#! /usr/bin/env python
# -*- coding: utf-8 -*-

##
#
# @file bblas.py
#
# @brief Python script used to install BBLAS and its dependencies.
#
# BBLAS is a software package provided by Univ. of Manchester,
# Univ. of Tennessee.
#
# @version 1.0.0
# @author Julie Langou
# @author Mathieu Faverge
# @author Samuel D. Relton
# @date 2016-04-14
#
#
# University of Tennessee ICL License
#
# -- Innovative Computing Laboratory
# -- Electrical Engineering and Computer Science Department
# -- University of Tennessee
# -- (C) Copyright 2008-2010
#
# Redistribution  and  use  in  source and binary forms, with or without
# modification,  are  permitted  provided  that the following conditions
# are met:
#
# * Redistributions  of  source  code  must  retain  the above copyright
#   notice,  this  list  of  conditions  and  the  following  disclaimer.
# * Redistributions  in  binary  form must reproduce the above copyright
#   notice,  this list of conditions and the following disclaimer in the
#   documentation  and/or other materials provided with the distribution.
# * Neither  the  name of the University of Tennessee, Knoxville nor the
#   names of its contributors may be used to endorse or promote products
#   derived from this software without specific prior written permission.
#
# THIS  SOFTWARE  IS  PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ``AS IS''  AND  ANY  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A  PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT NOT
# LIMITED  TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA,  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY  OF  LIABILITY,  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF  THIS  SOFTWARE,  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
##

from utils import writefile, runShellCommand, downloader
import sys
import os
import framework
import shutil

##
# This class compiles BBLAS, generates the documentation, and runs basic tests.
##
class BBLAS(framework.Framework):

    ##
    # Initialization function
    ##
    def __init__(self, argv, config):
        framework.Framework.__init__(self, argv, config)

    ##
    # Start compilation
    ##
    def resume(self):
        print '\n','='*40
        print '  BBLAS Compilation'
        print '='*40
        self.install()

    ##
    # Generate make.inc file based upon command line options
    ##
    def write_makeinc(self):
        """ Writes the make.inc file for BBLAS installation """
        os.chdir('../')
        basedir = os.getcwd()
        os.chdir(self.build)
        print 'Writing make.inc...',
        sys.stdout.flush()
        makeinc = """
##############################################################
# BBLAS make.inc file
#
# Automatically generated by setup.py
#
# BBLAS is a software package provided by Univ. of Manchester,
# Univ. of Tennessee
##############################################################


# BBLAS Source Code
BBLAS_BASE_DIR  = """+basedir+"""
BBLAS_SRC_DIR   = $(BBLAS_BASE_DIR)/src
BBLAS_TEST_DIR  = $(BBLAS_BASE_DIR)/testing
BBLAS_OMP_DIR   = $(BBLAS_TEST_DIR)/bblas_omp
BBLAS_MKL_DIR   = $(BBLAS_TEST_DIR)/bblas_mkl
BBLAS_CUDA_DIR  = $(BBLAS_TEST_DIR)/bblas_cuda
BBLAS_MAGMA_DIR = $(BBLAS_TEST_DIR)/bblas_magma

DEPS            = -I$(BBLAS_BASE_DIR)/include -I$(BBLAS_TEST_DIR) -I$(BBLAS_MKL_DIR) -I$(BBLAS_OMP_DIR) -I$(BBLAS_CUDA_DIR) -I$(BBLAS_MAGMA_DIR)
LDFLAGS         = -fopenmp

# Compiler
CC = """+self.config.cc+"""
CFLAGS = -c -std=c99 -DADD_ -Wall -pedantic -fopenmp"""
        # If using CUDA
        if self.usecuda:
            makeinc += """
CFLAGS += -DBBLAS_WITH_CUBLAS"""
        # End if CUDA
        # If using MAGMA
        if self.usemagma:
            makeinc += """
CFLAGS += -DBBLAS_WITH_MAGMA"""
        # End if MAGMA
        # If using MKL
        if self.config.blasname is "mkl":
            makeinc += """
CFLAGS += -DBBLAS_WITH_MKL
DEPS   += -m64 -I${MKLROOT}/include"""
            if "ilp64" in self.config.blaslib:
                makeinc +="""
DEPS += -DMKL_ILP64

"""
        else:
            makeinc +="""
# Not using MKL so need to directly include the following libraries
LDFLAGS += -llapacke -llapack -lcblas -lblas

"""
        # End if MKL
        makeinc += """
# BLAS libraries
BLAS_LIB        = """+self.config.blaslib+"""

# CBLAS libraries
CBLAS_DIR       = """+self.config.cblasdir+"""
CBLAS_LIB       = -L$(CBLAS_DIR)/lib
CBLAS_INC       = -I$(CBLAS_DIR)/include

# LAPACK libraries
LAPACK_DIR      = """+self.config.lapackdir+"""
LAPACK_LIB      = -L$(LAPACK_DIR)/lib
LAPACK_INC      = -I$(LAPACK_DIR)/include

# LAPACKE libraries
LAPACKE_DIR     = """+self.config.lapcdir+"""
LAPACKE_LIB     = -L$(LAPACKE_DIR)/lib
LAPACKE_INC     = -I$(LAPACKE_DIR)/include

"""
        # If using CUDA
        if self.usecuda:
            makeinc += """
# CUDA libraries
CUDA_DIR        = """+self.config.cudadir+"""
CUDA_LIB        = -L$(CUDA_DIR)/lib64 -lcudart -lcublas
CUDA_INC        = -I$(CUDA_DIR)/include
DEPS           += $(CUDA_INC)
LDFLAGS        += $(CUDA_LIB)
"""
            #end if
        # If using MAGMA
        if self.usemagma:
            makeinc += """
# CUDA libraries
MAGMA_DIR        = """+self.config.magmadir+"""
MAGMA_LIB        = -L$(MAGMA_DIR)/lib -lmagma
MAGMA_INC        = -I$(MAGMA_DIR)/include
DEPS           += $(MAGMA_INC)
LDFLAGS        += $(MAGMA_LIB)
"""
            #end if

        makeinc += """
DEPS += $(LAPACKE_INC) $(LAPACK_INC) $(CBLAS_INC)

LDFLAGS += $(LAPACKE_LIB) $(LAPACK_LIB) $(CBLAS_LIB) $(BLAS_LIB) -lm -lgfortran

"""
        writefile('../make.inc', makeinc)

        ##
        # Main directory of BBLAS
        ##
        self.bblasdir = basedir
        print 'done.'

    ##
    # Compile, test, and install BBLAS
    ##
    def install(self):
        """ Compile, test, and install BBLAS """

        savecwd = os.getcwd() # Location we are building in

        # creating the build and lib dirs if don't exist
        if not os.path.isdir(os.path.join(self.prefix,'lib')):
            os.mkdir(os.path.join(self.prefix,'lib'))

        if not os.path.isdir(os.path.join(self.prefix,'include')):
            os.mkdir(os.path.join(self.prefix,'include'))

        if not os.path.isdir(os.path.join(os.getcwd(),'log')):
            os.mkdir(os.path.join(os.getcwd(),'log'))

        self.write_makeinc()

        print 'Compiling BBLAS and tests...',
        sys.stdout.flush()
        comm = "(cd ../testing && "+self.make+")" # System command to be run
        (output, error, retz) = runShellCommand(comm)
        if retz:
            print '\n\nBBLAS: Error building BBLAS'
            print 'stderr:\n','*'*40,'\n',error,'\n','*'*40
            writefile(os.path.join(savecwd,'log/bblaslog'), output+error)
            sys.exit()

        liblog = os.path.join(savecwd,'log/bblaslog')
        writefile(liblog, output+error)
        print 'Compilation of BBLAS and tests successful.'
        print '(log is in ',liblog,')\n'
        sys.stdout.flush()

        ##
        # Build documentation if requested
        ##
        if self.documentation == 1:
	    print "="*40
	    print "  Building Documentation"
	    print "="*40
	    print "Output saved in ./docs..."
	    sys.stdout.flush()
	    comm = "(cd ../ && doxygen Doxyfile)"
	    (output, error, retz) = runShellCommand(comm)
	    if retz:
	        print "\n\nBBLAS: Error building documentation"
	        print "stderr:\n", "*"*40,"\n",error,"\n","*"*40
	        writefile(os.path.join(savecwd, "log/bblaslog"), output+error)
	        sys.exit()
	    writefile(liblog, output+error)

        ##
        # Run tests if requested
        ##
        if self.testing == 1:

            # Open the file for writing the output and errors
            testlog = os.path.join(savecwd,'log/bblastestlog')
            f = open(testlog, 'w')
            print "\n"
            print "="*40
            print "  Running Basic Tests"
            print  "="*40
            print "Output saved to ", os.path.join(savecwd,'log/bblastestlog'), "..."
            sys.stdout.flush()

            # OpenMP Tests
            print 'Running OpenMP tests...',
            sys.stdout.flush()
            comm = "(cd ../testing && ./run_tests.py --other)"
            (output, error, retz) = runShellCommand(comm)
            if retz:
                print '\n\nBBLAS: Error running OpenMP tests...'
                print 'stderr:\n','*'*40,'\n',error,'\n','*'*40
                f.write(output+error)
                f.close()
                sys.exit()
            print 'Completed OpenMP tests...'
            sys.stdout.flush()
            f.write(output+error)

            if self.config.blasname == "mkl":
                # MKL Tests
                print 'Running MKL tests...',
                sys.stdout.flush()
                comm = "(cd ../testing && ./run_tests.py --gemm --batch_opts f --mkl)"
                (output, error, retz) = runShellCommand(comm)
                if retz:
                    print '\n\nBBLAS: Error running MKL tests...'
                    print 'stderr:\n','*'*40,'\n',error,'\n','*'*40
                    f.write(output+error)
                    f.close()
                    sys.exit()
                print 'Completed MKL tests...'
                sys.stdout.flush()
                f.write(output+error)

            if self.usecuda:
                # CuBLAS Tests
                print 'Running CUBLAS tests...',
                sys.stdout.flush()
                comm = "(cd ../testing && ./run_tests.py --gemm --trsm --batch_opts f --cublas)"
                (output, error, retz) = runShellCommand(comm)
                if retz:
                    print '\n\nBBLAS: Error running CUBLAS tests...'
                    print 'stderr:\n','*'*40,'\n',error,'\n','*'*40
                    f.write(output+error)
                    f.close()
                    sys.exit()
                print 'Completed CUBLAS tests...'
                sys.stdout.flush()
                f.write(output+error)

            if self.usemagma:
                # MAGMA Tests
                print 'Running MAGMA tests...',
                sys.stdout.flush()
                comm = "(cd ../testing && ./run_tests.py --gemm --trsm --herk --batch_opts f --magma)"
                (output, error, retz) = runShellCommand(comm)
                if retz:
                    print '\n\nBBLAS: Error running MAGMA tests...'
                    print 'stderr:\n','*'*40,'\n',error,'\n','*'*40
                    f.write(output+error)
                    f.close()
                    sys.exit()
                print 'Completed MAGMA tests...'
                sys.stdout.flush()
                f.write(output+error)

            print "Completed all testing..."
            sys.stdout.flush()


        # Install
        print "\n"
        print "="*40
        print " Install BBLAS"
        print "="*40
        comm = 'make install'
        (output, error, retz) = runShellCommand(comm, sys.stdout)
        if retz:
            print '\nBBLAS: make install failed... '
            print 'stderr:\n','*'*40,'\n',error,'\n','*'*40
            f.write(output+error)
            f.close()
            sys.exit()

        ##
        # The BBLAS library file
        ##
        self.bblaslib     = os.path.join(self.prefix,'lib/libbblas.a ')

        os.chdir(savecwd)
        print "BBLAS is installed. Use it wisely! :-)"
